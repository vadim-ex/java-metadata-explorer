plugins {
    id 'java'
    id 'java-library'
    id 'application'
}
apply from: 'jdks.gradle'

repositories {
    mavenCentral()
}

sourceSets {
    java9 {
        java {
            srcDirs = ['src/main/java9']
        }
    }
}

jar {
    into('META-INF/versions/9') {
        from sourceSets.java9.output
    }

    manifest.attributes(
            'Implementation-Title': "Java Metadata Explorer" ,
            'Built-By' : System.properties['user.name'] ,
            'Build-Timestamp' : new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()) ,
            'Created-By' : "Gradle ${gradle.gradleVersion}" ,
            'Build-Jdk' : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
            'Build-OS' : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}" ,
            'Multi-Release' : 'true',
            'Main-Class' : 'com.stelary.metadata.explorer.Cli',
    )
}

mainClassName = 'com.stelary.metadata.explorer.Cli'

dependencies {
    // TODO(2019/02/25): current version of lombok plugin does not work with MRJAR.
    // Use direct dependency instead.
    def lombokSpec = 'org.projectlombok:lombok:1.18.6'

    // This is only necessary because in real life, we have dependencies between classes
    // and what you're likely to want to do, is to provide a JDK 9 specific class, which depends on common
    // classes of the main source set. In other words, you want to override some specific classes, but they
    // still have dependencies onto other classes.
    // We want to avoid recompiling all those classes, so we're just saying that the Java 9 specific classes
    // "depend on" the main ones.
    java9Implementation files(sourceSets.main.output.classesDirs) { builtBy compileJava }

    compileOnly lombokSpec
    annotationProcessor lombokSpec

    compile 'commons-cli:commons-cli:1.4'
    testCompile 'org.testng:testng:6.8.21'

    java9CompileOnly lombokSpec
    java9AnnotationProcessor lombokSpec
    java9Compile 'commons-cli:commons-cli:1.4'
}

compileJava {
    sourceCompatibility = 8
    targetCompatibility = 8
}

compileJava9Java {
    sourceCompatibility = 9
    targetCompatibility = 9
}

test {
    useTestNG()
    dependsOn jar
    classpath = files(jar.archivePath, classpath) - sourceSets.main.output
}

//def testForJdk(jdkVersion, theTask) {
//    def jdkHome = System.getenv("JAVA_$jdkVersion")
//    if (jdkHome) {
//        theTask.dependsOn jar
//        classpath = files(jar.archivePath, classpath) - sourceSets.main.output
//        executable = file("$jdkHome/bin/java")
//        theTask.doFirst {
//            println "$name runs test using JDK $jdkVersion"
//        }
//    } else {
//        println "Environment variable JAVA_$jdkVersion not found, the $theTask skipped"
//    }
//}

// test {
//     dependsOn jar
//     def jdkHome = System.getenv("JAVA_8")
//     classpath = files(jar.archivePath, classpath) - sourceSets.main.output
//     executable = file("$jdkHome/bin/java")
//     doFirst {
//         println "$name runs test using JDK 8"
//     }
// }

// task testJava9(type: Test) {
//     dependsOn jar
//     def jdkHome = System.getenv("JAVA_9")
//     classpath = files(jar.archivePath, classpath) - sourceSets.main.output
//     executable = file("$jdkHome/bin/java")
//     doFirst {
//         println classpath.asPath
//         println "$name runs test using JDK 9"
//     }
// }

// check.dependsOn(testJava9)


// // You might wonder why not use the `application` plugin here?
// // Well it's easy: it doesn't build the jar (because it doesn't have to,
// // it can use the class directory instead), so since it's not a jar, multi-release is not seen!
// // Another good reason not to use MRJars!
// task run(type: JavaExec) {
//     dependsOn jar
//     classpath files(jar.archivePath)
//     main = 'com.acme.JdkSpecific'
// }
